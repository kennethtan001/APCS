// Types A4: Denizen

import java.util.Scanner;

/** 
  This program operates like a denizen in a game
  @author Kenneth Tan
*/   

/**
   There is 1 denizen with a name, type, and hometown. He will introduce himself
   and then attack or heal other players several times. His stats are also output 
   at the end.
*/
public class DenizenTester_2TanK
{  
   public static void main ( String [] args)
   {
      Denizen bob = new Denizen();
      Enemy chicken = new Enemy();
      Battle b1 = new Battle(bob,chicken);
   }
}

/**
      Creates methods that give more information about the denizen
*/
class Denizen
{
   private String denizenName;
   private String denizenType;
   private int healthPoints;
   private int strength;
   private int knowledgeLevel;
   private String denizenHometown;
   private int damageDealt;
   private int healingGiven;
   private double probabilityHold;
   private int numMoves;
   
   /**
      Constructs a level 1 denizen starting with 100HP, 80 strength, and 
      initializes the other instance variables. These other instance variables
      are all set to 0 by default. The denizen's name, type, and hometown
      are not initialized here and will be initialized in the next method
      designed to do this.
   */
   public Denizen()
   {   
      healthPoints = 100;
      strength = 80;
      knowledgeLevel = 1;
      damageDealt = 0;
      healingGiven = 0;
      probabilityHold = 0.0;
      numMoves = 0;
      denizenInfo();
   }
   
   /**
      Gets the user input for the character's name, type, and hometown
   */
   public void denizenInfo()
   {
      Scanner myScanner = new Scanner (System.in);
      System.out.print("What is the character's name? \t ");
      denizenName = myScanner.nextLine();
      System.out.print( "What kind of character is he/she? \t ");
      denizenType = myScanner.nextLine();
      System.out.print("What place of origin? \t");
      denizenHometown = myScanner.nextLine();
   }

   /**
      Prints out a greeting with the character's name, type and hometown
   */
   public String greet( )
   {  
      return "Hello! I am a " + denizenType + " named " + denizenName + 
      " and I am from " + denizenHometown + ".";
   }

   /** 
      Uses Math.random() to randomly determine if the character will attack or
      heal, and then determines how much the character attacks/heals based
      on knowledge level. This method then returns the damage done or 
      healing given.
   */
   public String attaccOrHeal()
   {
      damageDealt = (int) (Math.random()  * 2 * knowledgeLevel + 10);
      healingGiven = (int) (Math.random() * 2 * knowledgeLevel + 10);
      probabilityHold = Math.random();
      numMoves++;
      if ((numMoves % 10) == 0)
         knowledgeLevel++;
      if (probabilityHold <= 0.5)
         return denizenName + " heals " + healingGiven;
      else
         return denizenName + " deals " + damageDealt + " damage.";
   }
   
   public void attacc()
   {
      damageDealt = (int) (Math.random()  * 2 * knowledgeLevel + 10);
      numMoves++;
      if ((numMoves % 10) == 0)
         knowledgeLevel++;
   }
   
   public int getAttacc()
   {
      return damageDealt;
   }
   
   public void healing()
   {
      healingGiven = (int) (Math.random() * 2 * knowledgeLevel + 10);
      numMoves++;
      if ((numMoves % 10) == 0)
         knowledgeLevel++;
      healthPoints = healingGiven + healthPoints;
   }
   
   public int getHealing()
   {
      return healingGiven;
   }
   
   public void takeDamage(int damageReceived)
   {
      healthPoints = healthPoints - damageReceived;
   }
   
   public int getHealthPoints()
   {
      return healthPoints;
   }
      
   public boolean isAlive()
   {
      if (healthPoints > 0)
         return true;
      else
         return false;
   }
   
   /**
      Returns the character's stats
   */
   public String toString()
   {
      return "Your Level " + knowledgeLevel + " denizen is at " + healthPoints + 
      " health and " + strength + " strength.";
   }

}


class Enemy
{
   private int enemyHealth;
   private int enemyDamageDealt;
   
   public Enemy()
   {
      enemyHealth = (int) (Math.random() * 50 + 20);
   }
   
   public int getEnemyHealth()
   {
      return enemyHealth;
   }
   
   public void damageDealt()
   {
      enemyDamageDealt = (int) (Math.random() * 20);
   }
   
   public int getDamageDealt()
   {
      return enemyDamageDealt;
   }
   
   public void enemyTakeDamage(int damageReceived)
   {
      enemyHealth = enemyHealth - damageReceived;
   }
}


class Battle
{
   private Denizen d1;
   private Enemy e1;
   private boolean currentlyFighting;
   private String combatMove;
   private int damageTaken;
   
   public Battle(Denizen denizen1, Enemy enemy1)
   {
      d1 = denizen1;
      e1 = enemy1;
      currentlyFighting = false;
      damageTaken = 0;
      fight();
   }
   
   public void fight()
   {
      currentlyFighting = true;
      //Enemy enemy1 = new Enemy();
      Scanner fightMove = new Scanner(System.in);
      e1.damageDealt();
      System.out.println("Here is enemy. HP: " + e1.getEnemyHealth() + ", Attack pwr: " + e1.getDamageDealt());
      while ((d1.isAlive() == true) && (currentlyFighting == true))
      {
         System.out.println("What is your move: attack or heal?");
         combatMove = fightMove.nextLine();
         combatMove = combatMove.toLowerCase();
         while ((!combatMove.equals("attack")) && (!combatMove.equals("heal")))
         {
            System.out.println("Invalid choice. Please select again.");
            System.out.println("What will your move be: attack or heal?");
            combatMove = fightMove.nextLine();
            combatMove = combatMove.toLowerCase();
         }
         if (combatMove.equals("attack"))
         {
            d1.attacc();
            e1.enemyTakeDamage(d1.getAttacc());
            System.out.println("You dealt " + d1.getAttacc() + " damage.");
            if (e1.getEnemyHealth() > 0)
            {
               damageTaken = e1.getDamageDealt();
               d1.takeDamage(damageTaken);
               System.out.println("You took " + damageTaken + " damage. ");
               if (d1.isAlive() == true)
               {
                  System.out.println("Your HP:" + d1.getHealthPoints());
               }
               if (d1.isAlive() == false)
               {
                  System.out.println("Your HP: 0");
                  currentlyFighting = false;
               }
               System.out.println("Here is enemy. HP: " + e1.getEnemyHealth() + ", Attack pwr: " + e1.getDamageDealt());
               currentlyFighting = true;
            }
            if (e1.getEnemyHealth() <= 0)
            {
               System.out.println("You defeated the enemy!");
               currentlyFighting = false;
            }
         }
         if (combatMove.equals("heal"))
         {
            d1.healing();
            System.out.println("You healed yourself by " + d1.getHealing() + "HP.");
            if (e1.getEnemyHealth() > 0)
            {
               damageTaken = e1.getDamageDealt();
               d1.takeDamage(damageTaken);
               System.out.println("You took " + damageTaken + " damage. ");
               if (d1.isAlive() == true)
               {
                  System.out.println("Your HP:" + d1.getHealthPoints());
               }
               if (d1.isAlive() == false)
               {
                  System.out.println("Your HP: 0 ");
                  currentlyFighting = false;
               }
               System.out.println("Here is enemy. HP: " + e1.getEnemyHealth() + ", Attack pwr: " + e1.getDamageDealt());
               currentlyFighting = true;
            }
            if (e1.getEnemyHealth() <= 0)
            {
               System.out.println("You defeated the enemy!");
               currentlyFighting = false;
            }
         }
      }
   }
   
}

// Types A4: Denizen

import java.util.Scanner;

/** 
  This program operates like a car
  @author Kenneth Tan
*/   

/**
   There are two cars with different car types and drive types with mileage, fuel, and gears.
   The mileage will be changed by driving more, the fuel increased by refueling and
   decreased by driving more, and literally changing the gears.
*/
public class DenizenGame
{  
   public static void main ( String [] args)
   {
      Denizen bob = new Denizen();
      
   }
}

/**
      Creates methods that give more information about the car
*/
class Denizen
{
   private String denizenName;
   private String denizenType;
   private int healthPoints;
   private int strength;
   private int knowledgeLevel;
   private String denizenHometown;
   private int damageDealt;
   private int healingGiven;
   private double probabilityHold;
   private int numMoves;
   private boolean continueGame;
   private String move;
   private boolean currentlyFighting;
   private int damageTaken;
   private String combatMove;
   
   /**
      Constructs a car starting with 0 gallons of fuel, 0 mileage
      The car type and drive type are passed in as parameters 
      The default gear is set here as D
   */
   public Denizen()
   {   
      healthPoints = 100;
      strength = 80;
      knowledgeLevel = 1;
      damageDealt = 0;
      healingGiven = 0;
      probabilityHold = 0.0;
      numMoves = 0;
      continueGame = true;
      move = "";
      damageTaken = 0;
      denizenInfo();
      currentlyFighting = false;
      combatMove = "";
      while (continueGame == true)
      {
         runGame();
      }
      if (continueGame == false)
         System.out.println("GAME OVER");
   }
   
   public void denizenInfo()
   {
      Scanner myScanner = new Scanner (System.in);
      System.out.print("What is the character's name? \t ");
      denizenName = myScanner.nextLine();
      System.out.print( "What kind of character is he/she? \t ");
      denizenType = myScanner.nextLine();
      System.out.print("What place of origin? \t");
      denizenHometown = myScanner.nextLine();
   }

   /**
      Increments mileage by 50. Lose 5 gallons of fuel for each 50 miles driven
   */
   public String greet( )
   {  
      return "Hello! I am a " + denizenType + " named " + denizenName + 
      " and I am from " + denizenHometown + ".";
   }

   public String attaccOrHeal()
   {
      damageDealt = (int) (Math.random()  * 2 * knowledgeLevel + 10);
      healingGiven = (int) (Math.random() * 2 * knowledgeLevel + 10);
      probabilityHold = Math.random();
      numMoves++;
      if ((numMoves % 10) == 0)
         knowledgeLevel++;
      if (probabilityHold <= 0.5)
         return denizenName + " heals " + healingGiven;
      else
         return denizenName + " deals " + damageDealt + " damage.";
   }
   
   public void attacc()
   {
      damageDealt = (int) (Math.random()  * 2 * knowledgeLevel + 10);
      numMoves++;
      if ((numMoves % 10) == 0)
         knowledgeLevel++;
   }
   
   public int getAttacc()
   {
      return damageDealt;
   }
   
   public void healing()
   {
      healingGiven = (int) (Math.random() * 2 * knowledgeLevel + 10);
      numMoves++;
      if ((numMoves % 10) == 0)
         knowledgeLevel++;
      healthPoints = healingGiven + healthPoints;
   }
   
   public int getHealing()
   {
      return healingGiven;
   }
   
   public void takeDamage(int damageReceived)
   {
      healthPoints = healthPoints - damageReceived;
   }
   
   public int getHealthPoints()
   {
      return healthPoints;
   }
   
   public boolean isAlive()
   {
      if (healthPoints > 0)
         return true;
      else
         return false;
   }
   
   public void runGame()
   {
      Scanner makeMove = new Scanner(System.in);
      System.out.println("What will your move be: greet, attack, heal, or quit?");
      move = makeMove.nextLine();
      move = move.toLowerCase();
      while ((!move.equals("attack")) && (!move.equals("heal"))  && (!move.equals("quit")) && (!move.equals("greet")))
      {
         System.out.println("Invalid choice. Please select again.");
         System.out.println("What will your move be: greet, attack, heal, or quit?");
         move = makeMove.nextLine();
         move = move.toLowerCase();
      }
      if (move.equals("greet")) 
      {
         System.out.println(greet());
         move = "";
      }
      if (move.equals("attack"))
      {
         fight();
         move = "";
      }
      if (move.equals("heal")) 
      {
         System.out.println(denizenName + " heals by " + getHealing() + "HP");
         move = "";
      }
      if (move.equals("quit")) 
      {
         continueGame = false;
      }
   }
   
   public void fight()
   {
      currentlyFighting = true;
      Enemy creature1 = new Enemy();
      Scanner fightMove = new Scanner(System.in);
      System.out.println("Here is enemy. HP: " + creature1.getEnemyHealth() + ", Attack pwr: " + creature1.getDamageDealt());
      while ((isAlive() == true) && (currentlyFighting == true))
      {
         System.out.println("What is your move: attack or heal?");
         combatMove = fightMove.nextLine();
         combatMove = combatMove.toLowerCase();
         while ((!move.equals("attack")) && (!move.equals("heal")))
         {
            System.out.println("Invalid choice. Please select again.");
            System.out.println("What will your move be: attack or heal?");
            combatMove = fightMove.nextLine();
            combatMove = combatMove.toLowerCase();
         }
         if (combatMove.equals("attack"))
         {
            attacc();
            creature1.enemyTakeDamage(damageDealt);
            System.out.println("You dealt " + damageDealt + " damage.");
            if (creature1.getEnemyHealth() > 0)
            {
               damageTaken = creature1.getDamageDealt();
               takeDamage(damageTaken);
               System.out.println("You took " + damageTaken + " damage. ");
               if (isAlive() == true)
               {
                  System.out.println("Your HP:" + healthPoints);
               }
               if (isAlive() == false)
               {
                  System.out.println("Your || HP: 0 || ");
                  currentlyFighting = false;
                  continueGame = false;
               }
               System.out.println("Here is enemy. HP: " + creature1.getEnemyHealth() + ", Attack pwr: " + creature1.getDamageDealt());
               currentlyFighting = true;
            }
            if (creature1.getEnemyHealth() <= 0)
            {
               System.out.println("You defeated the enemy!");
               currentlyFighting = false;
            }
         }
         if (combatMove.equals("heal"))
         {
            healing();
            System.out.println("You healed yourself by " + healingGiven + "HP.");
            if (creature1.getEnemyHealth() > 0)
            {
               damageTaken = creature1.getDamageDealt();
               takeDamage(damageTaken);
               System.out.println("You took " + damageTaken + " damage. ");
               if (isAlive() == true)
               {
                  System.out.println("Your HP:" + healthPoints);
               }
               if (isAlive() == false)
               {
                  System.out.println("Your HP: 0 ");
                  currentlyFighting = false;
                  continueGame = false;
               }
               System.out.println("Here is enemy. HP: " + creature1.getEnemyHealth() + ", Attack pwr: " + creature1.getDamageDealt());
               currentlyFighting = true;
            }
            if (creature1.getEnemyHealth() <= 0)
            {
               System.out.println("You defeated the enemy!");
               currentlyFighting = false;
            }
         }
      }
   }
}


class Enemy
{
   private int enemyHealth;
   private int enemyDamageDealt;
   
   public Enemy()
   {
      enemyHealth = (int) (Math.random() * 50 + 20);
   }
   
   public int getEnemyHealth()
   {
      return enemyHealth;
   }
   
   public void damageDealt()
   {
      enemyDamageDealt = (int) (Math.random() * 20);
   }
   
   public int getDamageDealt()
   {
      return enemyDamageDealt;
   }
   
   public void enemyTakeDamage(int damageReceived)
   {
      enemyHealth = enemyHealth - damageReceived;
   }
   
}
